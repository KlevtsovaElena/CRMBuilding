package main

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"sync"
	"time"
)

func processMessage(message MessageT, messageInline MessageInlineT, wg *sync.WaitGroup, mutex *sync.Mutex) {

	defer wg.Done()

	//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	text := message.Message.Text
	fmt.Println(text)
	chatId := 0
	if messageInline.CallbackQuery.From.ID == 0 {
		chatId = message.Message.From.ID
	} else {
		chatId = messageInline.CallbackQuery.From.ID
	}
	sendMessage(chatId, "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", nil)

	firstName := message.Message.From.FirstName
	lastName := message.Message.From.LastName
	phone := message.Message.Contact.PhoneNumber
	latitude := message.Message.Location.Latitude
	longitude := message.Message.Location.Longitude
	username := message.Message.From.Username
	button := messageInline.CallbackQuery.Data
	id := messageInline.CallbackQuery.From.ID
	mesIdInline := messageInline.CallbackQuery.Message.MessageID

	//–Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ–±—â–∏–º —Ä–µ—Å—É—Ä—Å–æ–º –∏ –±–ª–æ–∫–∏—Ä—É–µ–º –µ–≥–æ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
	mutex.Lock()
	defer mutex.Unlock()
	//–µ—Å—Ç—å –ª–∏ —é–∑–µ—Ä
	var user UserT
	_, exist := usersDB[chatId]
	if !exist {
		user.ID = chatId
		user.FirstName = firstName
		user.LastName = lastName
		user.Username = username
		user.Tg_id = chatId
		user.PhoneNumber = phone
		user.City, _ = strconv.Atoi(button)
		user.Cart = make(map[int]int)
		user.Step = 1
		usersDB[chatId] = user
	} else {
		user = usersDB[chatId]
	}

	//–ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
	blocked := userIsBlocked(&user)
	if blocked {
		sendMessage(user.ID, "–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã", nil)
		return
	}

	//–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ —é–∑–µ—Ä–∞ –∏ –µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ "/start"
	if strings.HasPrefix(text, "/start ") {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
		paramValue := strings.TrimPrefix(text, "/start ")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
		if strings.Contains(paramValue, "provider") {

			hashString := strings.SplitN(text, "_", 2)[1]
			if hashString != "" {
				user.IsProvider = true
				user.Hash = hashString
			}

		}
	}

	////////
	////////
	////////
	//–î–∞–ª–µ–µ —Å–ª–µ–¥—É–µ—Ç –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞ - –±–ª–æ–∫ –ª–æ–≥–∏–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
	///////
	///////
	///////

	//–µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫
	if usersDB[chatId].IsProvider {

		switch {

		case usersDB[chatId].Step == 1:

			requestBody := `{"tg_username": "` + usersDB[chatId].Username + `", "tg_id":"` + strconv.Itoa(chatId) + `", "hash_string":"` + usersDB[chatId].Hash + `"}`

			response, _ := sendPost(requestBody, "http://"+link+"/api/vendors.php")

			// –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é response –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
			fmt.Println("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", string(response))

			//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ
			fmt.Println(string(response))

			//–ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json
			var serverResr ServerResponce
			json.Unmarshal(response, &serverResr)

			status := serverResr.OK
			payLoad := serverResr.PayLoad
			serverMessage := serverResr.Error

			if status {

				sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–∫–ª–∞–¥–∞, –≤—ã–±—Ä–∞–≤ –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç–µ", nil)
				user := usersDB[chatId]
				user.Vendor_id = payLoad
				user.Step += 1
				usersDB[chatId] = user

			} else if serverMessage == "–ü–æ—Å—Ç–∞–≤—â–∏–∫ —Å —Ç–∞–∫–∏–º telegram id —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω" {

				sendMessage(chatId, serverMessage, nil)

			} else {

				sendMessage(chatId, serverMessage, nil)

			}

		case usersDB[chatId].Step == 2:

			sendMessage(chatId, "–õ–æ–∫–∞—Ü–∏—è –≤–∞—à–µ–≥–æ —Å–∫–ª–∞–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞", nil)

			coordinates := Coordinates{
				Latitude:  latitude,
				Longitude: longitude,
			}

			jsonCoordinates, _ := json.Marshal(coordinates)

			requestBody := `{"id": "` + strconv.Itoa(usersDB[chatId].Vendor_id) + `", "coordinates":` + string(jsonCoordinates) + `, "hash_string":"` + usersDB[chatId].Hash + `"}`
			fmt.Println(requestBody)

			sendPost(requestBody, "http://"+link+"/api/vendors.php")

			user := usersDB[chatId]
			user.Step = 1
			usersDB[chatId] = user
			break

		}

		//–µ—Å–ª–∏
	} else {

		switch {

		// –∫–µ–π—Å –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		case text == "/start" || usersDB[chatId].Step == 1:

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/customers.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var personExist []UserT
			err = json.NewDecoder(resp.Body).Decode(&personExist)
			if err != nil {
				user := usersDB[chatId]
				user.Step = 1
				usersDB[chatId] = user

				//—Å–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
				buttons := [][]map[string]interface{}{
					{{"text": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "callback_data": "ru"}},
					{{"text": "O'zbekcha üá∫üáø", "callback_data": "uz"}},
					{{"text": "–é–∑–±–µ–∫—á–∞ üá∫üáø", "callback_data": "uzkcha"}},
				}

				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
				sendMessage(chatId, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—Ä–æ–π–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ üëá", inlineKeyboard)

				//—Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
				user.Step += 1
				usersDB[chatId] = user
				break
			} else {
				user := usersDB[chatId]
				user.Step = 4
				usersDB[chatId] = user

				if button == "ru" || button == "uz" || button == "uzkcha" {
					user.Language = button
					usersDB[chatId] = user
				}

				// —Ñ–æ—Ä–º–∏—Ä—É–µ–º json –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫
				requestBody := `{"first_name":"` + usersDB[chatId].FirstName + `", "last_name":"` + usersDB[chatId].LastName + `", "phone":"` + usersDB[chatId].PhoneNumber + `", "city_id":` + button + `, "tg_username":"` + usersDB[chatId].Username + `", "tg_id":` + strconv.Itoa(chatId) + `}`
				fmt.Println(requestBody)

				sendPost(requestBody, "http://"+link+"/api/customers.php")

				// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				keyboard := map[string]interface{}{
					"keyboard": [][]map[string]interface{}{
						{{"text": languages[usersDB[chatId].Language]["order"] + " üõç"}},

						{{"text": languages[usersDB[chatId].Language]["current_exchange_rate"] + " üíπ"},
							{"text": languages[usersDB[chatId].Language]["settings"] + " ‚öôÔ∏è"},
						},
						{{"text": languages[usersDB[chatId].Language]["my_orders"] + " üìï"},
							{"text": languages[usersDB[chatId].Language]["current_prices"] + " üìà"},
						},
						{{"text": languages[usersDB[chatId].Language]["contact"] + " üìû"},
							{"text": languages[usersDB[chatId].Language]["cart"] + " üóë"},
						},
					},
					"resize_keyboard":   true,
					"one_time_keyboard": false,
				}

				// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
				resp, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
				if err != nil {
					log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
				}
				defer resp.Body.Close()

				var userdetails []UserDetails
				err = json.NewDecoder(resp.Body).Decode(&userdetails)
				if err != nil {
					log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
				}

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
				for _, userdetail := range userdetails {

					menuText := url.QueryEscape("\n" + languages[usersDB[chatId].Language]["your_city"] + ": ")
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
					sendMessage(chatId, languages[usersDB[chatId].Language]["main_menu"]+menuText+userdetail.CityName, keyboard)

				}

				user.Step += 1
				usersDB[chatId] = user
				break
			}

		// –∫–µ–π—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		case usersDB[chatId].Step == 2 || button == "backToPhone":

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			keyboard := map[string]interface{}{
				"keyboard": [][]map[string]interface{}{
					{
						{
							"text":            "–î–∞",
							"request_contact": true,
						},
					},
					{
						{
							"text": "–ù–µ—Ç",
						},
					},
				},
				"resize_keyboard":   true,
				"one_time_keyboard": true,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, "–ü–æ–¥–µ–ª–∏—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", keyboard)
			user := usersDB[chatId]
			user.Step += 1
			user.Language = button
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
		case usersDB[chatId].Step == 3 && text == "–ù–µ—Ç":

			// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToPhone"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", inlineKeyboard)
			user := usersDB[chatId]
			user.Step -= 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
		case usersDB[chatId].Step == 3:

			user := usersDB[chatId]
			user.PhoneNumber = phone
			user.Username = username
			usersDB[chatId] = user

			buttons := [][]map[string]interface{}{}
			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/cities.php?deleted=0&is_active=1")
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var cities []City
			err = json.NewDecoder(resp.Body).Decode(&cities)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, city := range cities {
				button := []map[string]interface{}{
					{
						"text":          city.Name,
						"callback_data": city.ID,
					},
				}
				buttons = append(buttons, button)
			}

			// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_your_city"]+" üëá", inlineKeyboard)
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∑–∞–ø–∏—Å—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
		case usersDB[chatId].Step == 4:

			user := usersDB[chatId]
			user.Step = 4
			user.City, _ = strconv.Atoi(button)

			if button == "ru" || button == "uz" || button == "uzkcha" {
				user.Language = button
				usersDB[chatId] = user
			} else if button != "ru" && text == "" {
				fmt.Println("FIRST")
				// —Ñ–æ—Ä–º–∏—Ä—É–µ–º json –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫
				requestBody := `{"first_name":"` + usersDB[chatId].FirstName + `", "last_name":"` + usersDB[chatId].LastName + `", "phone":"` + usersDB[chatId].PhoneNumber + `", "city_id":` + button + `, "tg_username":"` + usersDB[chatId].Username + `", "tg_id":` + strconv.Itoa(chatId) + `}`
				fmt.Println(requestBody)

				sendPost(requestBody, "http://"+link+"/api/customers.php")
			} else if strings.Contains(text, "998") {
				resultString := strings.ReplaceAll(text, "+", "")
				if len(resultString) == 12 {
					user.PhoneNumber = resultString
					usersDB[chatId] = user
					// —Ñ–æ—Ä–º–∏—Ä—É–µ–º json –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –±—ç–∫
					requestBody := `{"phone":"` + usersDB[chatId].PhoneNumber + `", "tg_id":` + strconv.Itoa(chatId) + `}`
					fmt.Println(requestBody)

					sendPost(requestBody, "http://"+link+"/api/customers.php")
					sendMessage(chatId, url.QueryEscape(languages[usersDB[chatId].Language]["succesfully_changed_number"]+"\n"+languages[usersDB[chatId].Language]["new_number"]+text), nil)
				} else {
					sendMessage(chatId, languages[usersDB[chatId].Language]["incorrect_number_format"], nil)
					break
				}

			} // else {
			// 	sendMessage(chatId, "–í—ã –≤–≤–µ–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", nil)
			// 	break
			// }

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			keyboard := map[string]interface{}{
				"keyboard": [][]map[string]interface{}{
					{{"text": languages[usersDB[chatId].Language]["order"] + " üõç"}},

					{{"text": languages[usersDB[chatId].Language]["current_exchange_rate"] + " üíπ"},
						{"text": languages[usersDB[chatId].Language]["settings"] + " ‚öôÔ∏è"},
					},
					{{"text": languages[usersDB[chatId].Language]["my_orders"] + " üìï"},
						{"text": languages[usersDB[chatId].Language]["current_prices"] + " üìà"},
					},
					{{"text": languages[usersDB[chatId].Language]["contact"] + " üìû"},
						{"text": languages[usersDB[chatId].Language]["cart"] + " üóë"},
					},
				},
				"resize_keyboard":   true,
				"one_time_keyboard": false,
			}

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var userdetails []UserDetails
			err = json.NewDecoder(resp.Body).Decode(&userdetails)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, userdetail := range userdetails {

				menuText := url.QueryEscape("\n" + languages[usersDB[chatId].Language]["your_city"] + ": ")
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
				sendMessage(chatId, languages[usersDB[chatId].Language]["main_menu"]+menuText+userdetail.CityName, keyboard)

			}

			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤–æ–∑—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
		case button == "backToMenu":
			user := usersDB[chatId]
			user.Step = 4

			keyboard := map[string]interface{}{
				"keyboard": [][]map[string]interface{}{
					{{"text": languages[usersDB[chatId].Language]["order"] + " üõç"}},

					{{"text": languages[usersDB[chatId].Language]["current_exchange_rate"] + " üíπ"},
						{"text": languages[usersDB[chatId].Language]["settings"] + " ‚öôÔ∏è"},
					},
					{{"text": languages[usersDB[chatId].Language]["my_orders"] + " üìï"},
						{"text": languages[usersDB[chatId].Language]["current_prices"] + " üìà"},
					},
					{{"text": languages[usersDB[chatId].Language]["contact"] + " üìû"},
						{"text": languages[usersDB[chatId].Language]["cart"] + " üóë"},
					},
				},
				"resize_keyboard":   true,
				"one_time_keyboard": false,
			}

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var userdetails []UserDetails
			err = json.NewDecoder(resp.Body).Decode(&userdetails)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, userdetail := range userdetails {

				menuText := url.QueryEscape("\n" + languages[usersDB[chatId].Language]["your_city"] + ": ")
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
				sendMessage(chatId, languages[usersDB[chatId].Language]["main_menu"]+menuText+userdetail.CityName, keyboard)

			}

			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä
		case (usersDB[chatId].Step == 5 && text == languages[usersDB[chatId].Language]["order"]+" üõç") || (button == "backToGoods"):

			user := usersDB[chatId]
			user.Step = 5

			buttons := [][]map[string]interface{}{}
			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/categories/get-all-by-exist-products.php?city_id=" + strconv.Itoa(usersDB[chatId].City))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var categories []Category
			err = json.NewDecoder(resp.Body).Decode(&categories)
			if err != nil {

				buttons := [][]map[string]interface{}{
					{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
				}

				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				sendMessage(chatId, languages[usersDB[chatId].Language]["no_products_for_your_request"], inlineKeyboard)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, category := range categories {
				button := []map[string]interface{}{
					{
						"text":          category.CategoryName,
						"callback_data": category.CategoryName + " " + strconv.Itoa(category.ID),
					},
				}
				buttons = append(buttons, button)
			}
			buttons = append(buttons, []map[string]interface{}{
				{
					"text":          languages[usersDB[chatId].Language]["back"] + " üîô",
					"callback_data": "backToMenu",
				},
			})

			// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_material"]+" üëá", inlineKeyboard)
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ –±—Ä–µ–Ω–¥–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		case usersDB[chatId].Step == 6 || button == "backToBrands":

			user := usersDB[chatId]
			user.Step = 6
			// –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞ –¥–≤–µ —á–∞—Å—Ç–∏ –ø–æ –ø—Ä–æ–±–µ–ª—É
			parts := strings.Split(button, " ")
			firstCategoryName := parts[0]
			secondCategoryID := parts[1]
			if button != "backToBrands" {
				user.Category_id = secondCategoryID
				sendMessage(chatId, "–í—ã –≤—ã–±—Ä–∞–ª–∏: "+firstCategoryName, nil)
			}
			usersDB[chatId] = user
			buttons := [][]map[string]interface{}{}
			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/brands/get-by-category.php?category_id=" + usersDB[chatId].Category_id + "&city_id=" + strconv.Itoa(usersDB[chatId].City))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var brands []Brand
			err = json.NewDecoder(resp.Body).Decode(&brands)
			if err != nil {

				buttons := [][]map[string]interface{}{
					{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToGoods"}},
				}

				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				sendMessage(chatId, languages[usersDB[chatId].Language]["no_products_for_your_request"], inlineKeyboard)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, brand := range brands {
				button := []map[string]interface{}{
					{
						"text":          brand.BrandName,
						"callback_data": brand.ID,
					},
				}
				buttons = append(buttons, button)
			}
			buttons = append(buttons, []map[string]interface{}{
				{
					"text":          languages[usersDB[chatId].Language]["back"] + " üîô",
					"callback_data": "backToGoods",
				},
			})

			//—Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_brand"]+" üëá", inlineKeyboard)

			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
		case usersDB[chatId].Step == 7:

			var chozen_language string = ""
			if usersDB[chatId].Language == "ru" {
				chozen_language = "1"
			} else if usersDB[chatId].Language == "uz" {
				chozen_language = "2"
			} else {
				chozen_language = "3"
			}

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var userdetails []UserDetails
			err = json.NewDecoder(resp.Body).Decode(&userdetails)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, userdetail := range userdetails {

				// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
				resp, err := http.Get("http://" + link + "/api/products/get-with-details-language.php?deleted=0&vendor_active=1&is_active=1&price_confirmed=1&is_confirm=1&vendor_deleted=0&category_id=" + usersDB[chatId].Category_id + "&brand_id=" + button + "&city_id=" + strconv.Itoa(userdetail.CityID) + "&language=" + chozen_language)
				if err != nil {
					log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
				}
				defer resp.Body.Close()

				var product []Product
				err = json.NewDecoder(resp.Body).Decode(&product)

				// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
				for _, product := range product {
					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					buttons := [][]map[string]interface{}{
						{
							{"text": "‚ûñ 1", "callback_data": "minusone:" + strconv.Itoa(product.ID)},
							{"text": "0", "callback_data": "quantity"},
							{"text": "‚ûï 1", "callback_data": "addone:" + strconv.Itoa(product.ID)},
						},
						{
							{"text": "‚ûñ 10", "callback_data": "minus:" + strconv.Itoa(product.ID)},
							{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
							{"text": "‚ûï 10", "callback_data": "add:" + strconv.Itoa(product.ID)},
						},
						{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
					}

					// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					// –∫–æ–¥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ json
					inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

					fmt.Println(product.Photo)

					//—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
					caption := url.QueryEscape("<b><u>" + product.Name + "</u></b>\n" + languages[usersDB[chatId].Language]["market_price"] + "\n<b>" + strconv.Itoa(product.MaxPrice) + " —Å—É–º</b>\n" + languages[usersDB[chatId].Language]["bot_price"] + "\n<b>" + strconv.Itoa(product.Price) + " —Å—É–º</b>")
					apiURL := ""

					if strings.Contains(product.Photo, "http") {
						apiURL = "https://api.telegram.org/bot" + token + "/sendPhoto?chat_id=" + strconv.Itoa(id) + "&caption=" + caption + "&photo=" + product.Photo + "&parse_mode=HTML&reply_markup=" + string(inlineKeyboardJSON)
					} else {
						apiURL = "https://api.telegram.org/bot" + token + "/sendPhoto?chat_id=" + strconv.Itoa(id) + "&caption=" + caption + "&photo=" + domen + product.Photo + "&parse_mode=HTML&reply_markup=" + string(inlineKeyboardJSON)
					}

					fmt.Println(domen)
					requestURL, err := url.Parse(apiURL)
					if err != nil {
						log.Fatal(err)
					}

					// –°–æ–∑–¥–∞–Ω–∏–µ HTTP GET-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
					request, err := http.NewRequest("GET", requestURL.String(), nil)
					if err != nil {
						log.Fatal(err)
					}

					// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
					client := &http.Client{}
					response, err := client.Do(request)
					if err != nil {
						log.Fatal(err)
					}
					defer response.Body.Close()

					// –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
					responseData, err := io.ReadAll(response.Body)
					if err != nil {
						log.Fatal(err)
					}

					// –í—ã–≤–æ–¥ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
					finalURL := request.URL.String()
					fmt.Println("Final URL:", finalURL)

					// –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
					fmt.Println("Response:", string(responseData))
				}

			}

			// –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			user := usersDB[chatId]
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		case usersDB[chatId].Step == 8 && button == "goToCart" || text == languages[usersDB[chatId].Language]["cart"]+" üóë":

			user := usersDB[chatId]
			finalPrice := 0
			user.Step = 8
			benefit := 0
			marketPrice := 0
			cartText := ""
			for ID := range usersDB[chatId].Cart {

				fmt.Println(ID)
				// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
				resp, err := http.Get("http://" + link + "/api/products.php?deleted=0&id=" + strconv.Itoa(ID))
				if err != nil {
					log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
				}
				defer resp.Body.Close()

				var product Product
				err = json.NewDecoder(resp.Body).Decode(&product)
				if err != nil {
					fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
					return
				}

				cartText += product.Name + "\n" + strconv.Itoa(usersDB[chatId].Cart[ID]) + " ‚úñÔ∏è " + strconv.Itoa(product.Price) + "—Å—É–º/—à—Ç = " + strconv.Itoa(usersDB[chatId].Cart[ID]*product.Price) + " —Å—É–º\n"
				finalPrice += product.Price * usersDB[chatId].Cart[ID]
				marketPrice += product.MaxPrice * usersDB[chatId].Cart[ID]
				benefit += product.MaxPrice*usersDB[chatId].Cart[ID] - product.Price*usersDB[chatId].Cart[ID]

			}

			//–µ—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
			if text == languages[usersDB[chatId].Language]["cart"]+" üóë" {

				// –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
				if finalPrice == 0 {

					buttons := [][]map[string]interface{}{
						{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
					}

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					sendMessage(chatId, languages[usersDB[chatId].Language]["empty_cart"], inlineKeyboard)
				} else {

					buttons := [][]map[string]interface{}{

						{{"text": languages[usersDB[chatId].Language]["confirm_order"] + " ‚úÖ", "callback_data": "buy"}},
						{{"text": languages[usersDB[chatId].Language]["drop_cart"] + " ‚ùå", "callback_data": "dropCart"}},

						{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
					}

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					encodedCartText := url.QueryEscape(cartText)
					encodedText := url.QueryEscape(languages[usersDB[chatId].Language]["average_market_price"]+"\n<s>"+strconv.Itoa(marketPrice)+"</s> c—É–º\n"+languages[usersDB[chatId].Language]["bot_total_price"]+"\n"+strconv.Itoa(finalPrice)+" —Å—É–º\n"+languages[usersDB[chatId].Language]["you_saved"]+"\n<b>"+strconv.Itoa(benefit)) + "</b> —Å—É–º&parse_mode=HTML"
					finalText := encodedCartText + encodedText

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
					sendMessage(chatId, finalText, inlineKeyboard)

				}

				// –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ—Ç—Ä–∏—Ç –∫–æ—Ä–∏–∑–∏–Ω—É –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
			} else {

				// –µ—Å–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç
				if finalPrice == 0 {

					buttons := [][]map[string]interface{}{
						{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
					}

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					sendMessage(chatId, languages[usersDB[chatId].Language]["empty_cart"], inlineKeyboard)

				} else {

					buttons := [][]map[string]interface{}{

						{{"text": languages[usersDB[chatId].Language]["confirm_order"] + " ‚úÖ", "callback_data": "buy"}},
						{{"text": languages[usersDB[chatId].Language]["drop_cart"] + " ‚ùå", "callback_data": "dropCart"}},

						{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToGoods"}},
					}

					// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					encodedCartText := url.QueryEscape(cartText)
					encodedText := url.QueryEscape(languages[usersDB[chatId].Language]["average_market_price"]+"\n<s>"+strconv.Itoa(marketPrice)+"</s> c—É–º\n"+languages[usersDB[chatId].Language]["bot_total_price"]+"\n"+strconv.Itoa(finalPrice)+"\n<s>"+strconv.Itoa(marketPrice)+"</s> c—É–º\n"+languages[usersDB[chatId].Language]["bot_total_price"]+"\n"+strconv.Itoa(finalPrice)+" —Å—É–º\n"+languages[usersDB[chatId].Language]["you_saved"]+"\n<b>"+strconv.Itoa(benefit)) + "</b> —Å—É–º&parse_mode=HTML"
					finalText := encodedCartText + encodedText

					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
					sendMessage(chatId, finalText, inlineKeyboard)
				}
			}

			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
		case usersDB[chatId].Step == 9 && button == "buy":
			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["order_to_your_address"], "callback_data": "myAdress"}},
				{{"text": languages[usersDB[chatId].Language]["order_to_another_address"], "callback_data": "anotherAdress"}},
			}

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["specify_convenient_address"], inlineKeyboard)
			user := usersDB[chatId]
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –∞–¥—Ä–µ—Å–∞
		case usersDB[chatId].Step == 10 && button == "myAdress":

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			keyboard := map[string]interface{}{
				"keyboard": [][]map[string]interface{}{
					{
						{
							"text":             languages[usersDB[chatId].Language]["yes"],
							"request_location": true,
						},
					},
					{
						{
							"text": languages[usersDB[chatId].Language]["no"],
						},
					},
				},
				"resize_keyboard":   true,
				"one_time_keyboard": true,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["share_location"], keyboard)
			user := usersDB[chatId]
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–∏–µ –¥—Ä—É–≥–æ–≥–æ –∞–¥—Ä–µ—Å–∞
		case usersDB[chatId].Step == 10 && button == "anotherAdress":
			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			keyboard := map[string]interface{}{
				"keyboard": [][]map[string]interface{}{
					{
						{
							"text": languages[usersDB[chatId].Language]["decline"],
						},
					},
				},
				"resize_keyboard":   true,
				"one_time_keyboard": true,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["send_required_geoposition_via_telegram"], keyboard)
			user := usersDB[chatId]
			user.Step += 1
			usersDB[chatId] = user
			break

		// –∫–µ–π—Å –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ –∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –±–µ–∫–µ–Ω–¥
		case usersDB[chatId].Step == 11:

			user := usersDB[chatId]

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			res, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer res.Body.Close()

			var userdetails []UserDetails
			err = json.NewDecoder(res.Body).Decode(&userdetails)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, userdetail := range userdetails {

				for ID := range user.Cart {

					// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
					res, err := http.Get("http://" + link + "/api/products/get-with-details.php?id=" + strconv.Itoa(ID))
					if err != nil {
						log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
					}
					defer res.Body.Close()

					var product []Product
					err = json.NewDecoder(res.Body).Decode(&product)
					if err != nil {
						log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
					}

					// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
					for _, product := range product {
						if product.CityName != userdetail.CityName {

							// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
							keyboard := map[string]interface{}{
								"keyboard": [][]map[string]interface{}{
									{{"text": languages[usersDB[chatId].Language]["order"] + " üõç"}},

									{{"text": languages[usersDB[chatId].Language]["current_exchange_rate"] + " üíπ"},
										{"text": languages[usersDB[chatId].Language]["settings"] + " ‚öôÔ∏è"},
									},
									{{"text": languages[usersDB[chatId].Language]["my_orders"] + " üìï"},
										{"text": languages[usersDB[chatId].Language]["current_prices"] + " üìà"},
									},
									{{"text": languages[usersDB[chatId].Language]["contact"] + " üìû"},
										{"text": languages[usersDB[chatId].Language]["cart"] + " üóë"},
									},
								},
								"resize_keyboard":   true,
								"one_time_keyboard": false,
							}

							// –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
							user.Cart = map[int]int{}
							errorText := url.QueryEscape("\n" + languages[usersDB[chatId].Language]["your_city"] + ": " + userdetail.CityName + "\n" + languages[usersDB[chatId].Language]["product_location_city"] + ": " + product.CityName + "\n" + languages[usersDB[chatId].Language]["cant_order_these_products"] + " üôè")
							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
							sendMessage(chatId, languages[usersDB[chatId].Language]["main_menu"]+errorText, keyboard)

							user.Step = 5
							usersDB[chatId] = user
							break
						} else {
							time := time.Now().Unix()
							coordinates := Coordinates{
								Latitude:  latitude,
								Longitude: longitude,
							}
							jsonProducts, _ := json.Marshal(usersDB[chatId].Cart)
							jsonCoordinates, _ := json.Marshal(coordinates)

							// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
							resp, err := http.Get("http://" + link + "/api/customers.php?tg_id=" + strconv.Itoa(chatId))
							if err != nil {
								log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
							}
							defer resp.Body.Close()

							var userInfo []UserT
							err = json.NewDecoder(resp.Body).Decode(&userInfo)
							if err != nil {
								log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
							}

							// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
							for _, user := range userInfo {
								// –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
								requestBody := `{"customer_id":` + strconv.Itoa(user.ID) + `, "order_date":` + strconv.Itoa(int(time)) + `, "products":` + string(jsonProducts) + `, "location": ` + string(jsonCoordinates) + `}`

								fmt.Println(requestBody)
								sendPost(requestBody, "http://"+link+"/api/orders/create-with-vendor-calc.php")
							}

							// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
							keyboard := map[string]interface{}{
								"keyboard": [][]map[string]interface{}{
									{{"text": languages[usersDB[chatId].Language]["order"] + " üõç"}},

									{{"text": languages[usersDB[chatId].Language]["current_exchange_rate"] + " üíπ"},
										{"text": languages[usersDB[chatId].Language]["settings"] + " ‚öôÔ∏è"},
									},
									{{"text": languages[usersDB[chatId].Language]["my_orders"] + " üìï"},
										{"text": languages[usersDB[chatId].Language]["current_prices"] + " üìà"},
									},
									{{"text": languages[usersDB[chatId].Language]["contact"] + " üìû"},
										{"text": languages[usersDB[chatId].Language]["cart"] + " üóë"},
									},
								},
								"resize_keyboard":   true,
								"one_time_keyboard": false,
							}

							// –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
							user.Cart = map[int]int{}

							// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
							sendMessage(chatId, languages[usersDB[chatId].Language]["thank_you_for_choosing_stroybot"], keyboard)
							user.Step = 5
							usersDB[chatId] = user
							break
						}
					}
				}
			}

		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ + –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
		if strings.SplitN(button, ":", 2)[0] == "addone" {
			user := usersDB[chatId]
			productStr := strings.Split(button, ":")[1]
			productID, _ := strconv.Atoi(productStr)
			quantity := 1

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º id –≤ –º–∞—Å—Å–∏–≤–µ
			found := false
			for ID := range user.Cart {
				if ID == productID {
					// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
					user.Cart[ID] += quantity
					usersDB[chatId] = user
					found = true
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
					buttons := [][]map[string]interface{}{
						{
							{"text": "‚ûñ 1", "callback_data": "minusone:" + strconv.Itoa(ID)},
							{"text": strconv.Itoa(usersDB[chatId].Cart[ID]), "callback_data": "quantity"},
							{"text": "‚ûï 1", "callback_data": "addone:" + strconv.Itoa(ID)},
						},
						{
							{"text": "‚ûñ 10", "callback_data": "minus:" + strconv.Itoa(ID)},
							{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
							{"text": "‚ûï 10", "callback_data": "add:" + strconv.Itoa(ID)},
						},
						{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
					}

					// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					// –∫–æ–¥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ json
					inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

					http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
					break
				}
			}

			// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			if !found {
				user := usersDB[chatId]
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞ `Cart`
				if usersDB[chatId].Cart == nil {
					user.Cart = make(map[int]int)
				}

				user.Cart[productID] = quantity
				usersDB[chatId] = user

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
				buttons := [][]map[string]interface{}{
					{
						{"text": "‚ûñ 1", "callback_data": "minusone:" + productStr},
						{"text": "1", "callback_data": "quantity"},
						{"text": "‚ûï 1", "callback_data": "addone:" + productStr},
					},
					{
						{"text": "‚ûñ 10", "callback_data": "minus:" + productStr},
						{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
						{"text": "‚ûï 10", "callback_data": "add:" + productStr},
					},
					{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
				}

				// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				// –ö–æ–¥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
				inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

				http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
			}

		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ + –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞
		if strings.SplitN(button, ":", 2)[0] == "add" {
			user := usersDB[chatId]
			productStr := strings.Split(button, ":")[1]
			productID, _ := strconv.Atoi(productStr)
			quantity := 10

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º id –≤ –º–∞—Å—Å–∏–≤–µ
			found := false
			for ID := range user.Cart {
				if ID == productID {
					// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
					user.Cart[ID] += quantity
					usersDB[chatId] = user
					found = true
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
					buttons := [][]map[string]interface{}{
						{
							{"text": "‚ûñ 1", "callback_data": "minusone:" + strconv.Itoa(ID)},
							{"text": strconv.Itoa(usersDB[chatId].Cart[ID]), "callback_data": "quantity"},
							{"text": "‚ûï 1", "callback_data": "addone:" + strconv.Itoa(ID)},
						},
						{
							{"text": "‚ûñ 10", "callback_data": "minus:" + strconv.Itoa(ID)},
							{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
							{"text": "‚ûï 10", "callback_data": "add:" + strconv.Itoa(ID)},
						},
						{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
					}

					// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					// –∫–æ–¥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ json
					inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

					http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
					break
				}
			}

			// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –∫–∞—Ä—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
			if !found {
				user := usersDB[chatId]
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –∫–∞—Ä—Ç–∞ `Cart`
				if usersDB[chatId].Cart == nil {
					user.Cart = make(map[int]int)
				}

				user.Cart[productID] = quantity
				usersDB[chatId] = user

				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
				buttons := [][]map[string]interface{}{
					{
						{"text": "‚ûñ 1", "callback_data": "minusone:" + productStr},
						{"text": "10", "callback_data": "quantity"},
						{"text": "‚ûï 1", "callback_data": "addone:" + productStr},
					},
					{
						{"text": "‚ûñ 10", "callback_data": "minus:" + productStr},
						{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
						{"text": "‚ûï 10", "callback_data": "add:" + productStr},
					},
					{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
				}

				// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				// –ö–æ–¥–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
				inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

				http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
			}

		}

		// –∫–µ–π—Å –¥–ª—è - –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
		if strings.SplitN(button, ":", 2)[0] == "minus" {
			user := usersDB[chatId]
			productStr := strings.Split(button, ":")[1]
			productID, _ := strconv.Atoi(productStr)
			quantity := 10

			for ID := range usersDB[chatId].Cart {
				if ID == productID {
					// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
					if user.Cart[ID] <= quantity {
						user.Cart[ID] = 0
					} else {
						user.Cart[ID] -= quantity
					}
					usersDB[chatId] = user
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
					buttons := [][]map[string]interface{}{
						{
							{"text": "‚ûñ 1", "callback_data": "minusone:" + productStr},
							{"text": strconv.Itoa(usersDB[chatId].Cart[ID]), "callback_data": quantity},
							{"text": "‚ûï 1", "callback_data": "addone:" + productStr},
						},
						{
							{"text": "‚ûñ 10", "callback_data": "minus:" + productStr},
							{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
							{"text": "‚ûï 10", "callback_data": "add:" + productStr},
						},
						{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
					}

					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

					http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
					if usersDB[chatId].Cart[productID] == 0 {
						delete(usersDB[chatId].Cart, productID)
					}
					break
				}
			}
		}

		// –∫–µ–π—Å –¥–ª—è - –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–æ–≤
		if strings.SplitN(button, ":", 2)[0] == "minusone" {
			user := usersDB[chatId]
			productStr := strings.Split(button, ":")[1]
			productID, _ := strconv.Atoi(productStr)
			quantity := 1

			for ID := range usersDB[chatId].Cart {
				if ID == productID {
					// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
					if user.Cart[ID] <= quantity {
						user.Cart[ID] = 0
					} else {
						user.Cart[ID] -= quantity
					}
					usersDB[chatId] = user
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
					buttons := [][]map[string]interface{}{
						{
							{"text": "‚ûñ 1", "callback_data": "minusone:" + productStr},
							{"text": strconv.Itoa(usersDB[chatId].Cart[ID]), "callback_data": quantity},
							{"text": "‚ûï 1", "callback_data": "addone:" + productStr},
						},
						{
							{"text": "‚ûñ 10", "callback_data": "minus:" + productStr},
							{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToBrands"},
							{"text": "‚ûï 10", "callback_data": "add:" + productStr},
						},
						{{"text": languages[usersDB[chatId].Language]["go_to_cart"] + " üóë", "callback_data": "goToCart"}},
					}

					inlineKeyboard := map[string]interface{}{
						"inline_keyboard": buttons,
					}

					inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

					http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
					if usersDB[chatId].Cart[productID] == 0 {
						delete(usersDB[chatId].Cart, productID)
					}
					break
				}
			}
		}

		if button == "dropCart" {

			user := usersDB[chatId]
			// –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
			user.Cart = map[int]int{}
			usersDB[chatId] = user

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["dropped_cart"], nil)

		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
		if text == languages[usersDB[chatId].Language]["current_prices"]+" üìà" {

			channelURL := "t.me/stroy_bot_prices"

			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
			currentTime := time.Now()

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã GMT+5
			location := time.FixedZone("GMT+5", 5*60*60)

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			currentTime = currentTime.In(location)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
			formattedTime := currentTime.Format("01-02-2006 15:04:05")

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["go_to"] + " üåê", "url": channelURL}},
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["current_prices"]+" "+formattedTime, inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å
		if text == languages[usersDB[chatId].Language]["current_exchange_rate"]+" üíπ" {

			channelURL := "t.me/stroybotchannel2"

			// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
			currentTime := time.Now()

			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã GMT+5
			location := time.FixedZone("GMT+5", 5*60*60)

			// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
			currentTime = currentTime.In(location)

			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
			formattedTime := currentTime.Format("01-02-2006 15:04:05")

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["go_to"] + " üåê", "url": channelURL}},
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["current_exchange_rate"]+" "+formattedTime, inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –º–æ–∏ –∑–∞–∫–∞–∑—ã
		if text == languages[usersDB[chatId].Language]["my_orders"]+" üìï" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["my_orders"], inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤—è–∑–∞—Ç—å—Å—è
		if text == languages[usersDB[chatId].Language]["contact"]+" üìû" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["by_phone"] + " üì≤", "callback_data": "withPhone"}},
				{{"text": languages[usersDB[chatId].Language]["by_chat"] + " üí¨", "callback_data": "with–°hat"}},
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_way"]+" üëá", inlineKeyboard)

		}

		if button == "withPhone" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// // –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			// resp, err := http.Get("http://" + link + "/api/settings.php?name=phone")
			// if err != nil {
			// 	log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			// }
			// defer resp.Body.Close()

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, url.QueryEscape("+998903726322"), inlineKeyboard)

			user := usersDB[chatId]
			user.Step = 4
			usersDB[chatId] = user

		}

		if button == "with–°hat" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToMenu"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, "@stroybotuz_admin", inlineKeyboard)

			user := usersDB[chatId]
			user.Step = 4
			usersDB[chatId] = user

		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
		if text == languages[usersDB[chatId].Language]["settings"]+" ‚öôÔ∏è" || button == "backToSettings" {

			user := usersDB[chatId]
			// –æ–±–Ω—É–ª—è–µ–º –∫–æ—Ä–∑–∏–Ω—É
			user.Cart = map[int]int{}
			usersDB[chatId] = user

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["change_number"], "callback_data": "number"},
					{"text": languages[usersDB[chatId].Language]["change_city"], "callback_data": "city"}},

				{{"text": languages[usersDB[chatId].Language]["change_language"], "callback_data": "language"},
					{"text": languages[usersDB[chatId].Language]["public_offer"], "callback_data": "oferta"}},

				{{"text": languages[usersDB[chatId].Language]["information"], "callback_data": "info"},
					{"text": languages[usersDB[chatId].Language]["become_partner"], "callback_data": "partnership"}},

				{{"text": languages[usersDB[chatId].Language]["feedback"], "callback_data": "book"}},
			}

			buttons = append(buttons, []map[string]interface{}{
				{
					"text":          languages[usersDB[chatId].Language]["back"] + " üîô",
					"callback_data": "backToMenu",
				},
			})

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["settings"]+" ‚öôÔ∏è", inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∫–∞
		if button == "info" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToSettings"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ", inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞—Ä—Ç–Ω—ë—Ä
		if button == "partnership" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToSettings"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["become_partner"], inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
		if button == "book" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToSettings"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["feedback"], inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ñ–µ—Ä—Ç–∞
		if button == "oferta" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToSettings"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, "–û—Ñ–µ—Ä—Ç–∞", inlineKeyboard)
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —è–∑—ã–∫
		if button == "language" {

			//—Å–æ–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
			buttons := [][]map[string]interface{}{
				{{"text": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "callback_data": "1"}},
				{{"text": "O'zbekcha üá∫üáø", "callback_data": "2"}},
				{{"text": "–é–∑–±–µ–∫—á–∞ üá∫üáø", "callback_data": "3"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_language"]+" üëá", inlineKeyboard)

			user := usersDB[chatId]
			user.Step = 4
			usersDB[chatId] = user

		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥
		if button == "city" {
			buttons := [][]map[string]interface{}{}
			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/cities.php?deleted=0&is_active=1")
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var cities []City
			err = json.NewDecoder(resp.Body).Decode(&cities)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, city := range cities {
				button := []map[string]interface{}{
					{
						"text":          city.Name,
						"callback_data": city.ID,
					},
				}
				buttons = append(buttons, button)
			}

			// —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
			sendMessage(chatId, languages[usersDB[chatId].Language]["choose_your_city"]+" üëá", inlineKeyboard)
			user := usersDB[chatId]
			user.Step = 4
			usersDB[chatId] = user
		}

		// –∫–µ–π—Å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
		if button == "number" {

			buttons := [][]map[string]interface{}{
				{{"text": languages[usersDB[chatId].Language]["back"] + " üîô", "callback_data": "backToSettings"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://" + link + "/api/customers/get-with-details.php?tg_id=" + strconv.Itoa(chatId))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var userdetails []UserDetails
			err = json.NewDecoder(resp.Body).Decode(&userdetails)
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
			}

			// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –∏—Ö –≤ –∫–Ω–æ–ø–∫–∏
			for _, userdetail := range userdetails {

				phoneText := url.QueryEscape("\n" + languages[usersDB[chatId].Language]["current_number"] + userdetail.Phone)

				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —à–∞–≥
				sendMessage(chatId, url.QueryEscape(languages[usersDB[chatId].Language]["send_your_number"])+phoneText, inlineKeyboard)

			}

			user := usersDB[chatId]
			user.Step = 4
			usersDB[chatId] = user
		}

	}
}
