package main

import (
	"bytes"
	"database/sql"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
	"strconv"
	"strings"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

type ResponseT struct {
	Ok     bool `json:"ok"`
	Result []struct {
		UpdateID int `json:"update_id"`
		Message  struct {
			MessageID int `json:"message_id"`
			From      struct {
				ID           int    `json:"id"`
				IsBot        bool   `json:"is_bot"`
				FirstName    string `json:"first_name"`
				LastName     string `json:"last_name"`
				Username     string `json:"username"`
				LanguageCode string `json:"language_code"`
			} `json:"from"`
			Chat struct {
				ID        int    `json:"id"`
				FirstName string `json:"first_name"`
				LastName  string `json:"last_name"`
				Username  string `json:"username"`
				Type      string `json:"type"`
			} `json:"chat"`
			Date    int `json:"date"`
			Contact struct {
				PhoneNumber string `json:"phone_number"`
			} `json:"contact"`
			Location struct {
				Latitude  float64 `json:"latitude"`
				Longitude float64 `json:"longitude"`
			} `json:"location"`
			Text string `json:"text"`
			Data string `json:"data"`
		} `json:"message"`
	} `json:"result"`
}

type InlineButton struct {
	Ok     bool `json:"ok"`
	Result []struct {
		UpdateID      int `json:"update_id"`
		CallbackQuery struct {
			ID   string `json:"id"`
			From struct {
				ID           int    `json:"id"`
				IsBot        bool   `json:"is_bot"`
				FirstName    string `json:"first_name"`
				Username     string `json:"username"`
				LanguageCode string `json:"language_code"`
			} `json:"from"`
			Message struct {
				MessageID int `json:"message_id"`
				From      struct {
					ID        int64  `json:"id"`
					IsBot     bool   `json:"is_bot"`
					FirstName string `json:"first_name"`
					Username  string `json:"username"`
				} `json:"from"`
				Chat struct {
					ID        int    `json:"id"`
					FirstName string `json:"first_name"`
					Username  string `json:"username"`
					Type      string `json:"type"`
				} `json:"chat"`
				Date        int    `json:"date"`
				Text        string `json:"text"`
				ReplyMarkup struct {
					InlineKeyboard [][]struct {
						Text         string `json:"text"`
						CallbackData string `json:"callback_data"`
					} `json:"inline_keyboard"`
				} `json:"reply_markup"`
			} `json:"message"`
			ChatInstance string `json:"chat_instance"`
			Data         string `json:"data"`
		} `json:"callback_query"`
	} `json:"result"`
}

type UserT struct {
	ID          int
	FirstName   string
	LastName    string
	Username    string
	tg_id       int
	PhoneNumber string
	City        string
}

type Order struct {
	CustomerID  int                    `json:"customer_id"`
	OrderDate   int64                  `json:"order_date"`
	Products    map[int]int            `json:"products"`
	Coordinates map[string]interface{} `json:"coordinates"`
}

type OrderItem struct {
	ProductID int
	Quantity  int
}

type Coordinates struct {
	Latitude  float64 `json:"latitude"`
	Longitude float64 `json:"longitude"`
}

type Cities struct {
	ID   int    `json:"id"`
	Name string `json:"name"`
}

type Categories struct {
	ID           int    `json:"id"`
	CategoryName string `json:"category_name"`
}

type Brands struct {
	ID        int    `json:"id"`
	BrandName string `json:"brand_name"`
}

type Product struct {
	ID          int    `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
	Photo       string `json:"photo"`
	Price       int    `json:"price"`
	MaxPrice    int    `json:"max_price"`
}

var host string = "https://api.telegram.org/bot"
var token string = "6251938024:AAG84w6ZyxcVqUxmRRUW0Ro8d4ej7FpU83o"

var step int = 1

var tel string
var FirstName string
var LastName string

var products = make(map[int]int)
var client = http.Client{}

// var products = []int{}

// —Å–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
var Db, Err = sql.Open("mysql", "root:admin@tcp(mysql:3306)/crm-building")

func main() {

	lastMessage := 0

	for range time.Tick(time.Second * 1) {

		//–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Telegram API –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
		var url string = host + token + "/getUpdates?offset=" + strconv.Itoa(lastMessage)
		response, err := http.Get(url)
		if err != nil {
			fmt.Println(err)
		}
		data, _ := ioutil.ReadAll(response.Body)

		//–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ
		fmt.Println(string(data))

		// var responseObj ResponseT
		//–ø–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ json
		var responseObj ResponseT
		json.Unmarshal(data, &responseObj)

		var need InlineButton
		json.Unmarshal(data, &need)
		//fmt.Println(responseObj)

		//—Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
		number := len(responseObj.Result)

		//–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç - —Ç–æ –¥–∞–ª—å—à–µ –∫–æ–¥ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º
		if number < 1 {
			continue
		}

		//–≤ —Ü–∏–∫–ª–µ –¥–æ—Å—Ç–∞–≤–∞—Ç—å –∏–Ω–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
		for i := 0; i < number; i++ {

			text := responseObj.Result[i].Message.Text
			chatId := responseObj.Result[i].Message.From.ID
			messageTime := responseObj.Result[i].Message.Date
			firstName := responseObj.Result[i].Message.From.FirstName
			lastName := responseObj.Result[i].Message.From.LastName
			mesIdRepl := responseObj.Result[i].Message.MessageID
			phone := responseObj.Result[i].Message.Contact.PhoneNumber
			latitude := responseObj.Result[i].Message.Location.Latitude
			longitude := responseObj.Result[i].Message.Location.Longitude
			button := need.Result[i].CallbackQuery.Data
			id := need.Result[i].CallbackQuery.From.ID
			mesIdInline := need.Result[i].CallbackQuery.Message.MessageID
			username := need.Result[i].CallbackQuery.From.Username

			//–ø–∏—à–µ–º –±–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫—É ----------- –º–æ–∑–≥–∏

			//–æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
			go sendMessage(chatId, id, mesIdInline, mesIdRepl, messageTime, text, button, phone, firstName, lastName, username, latitude, longitude)

		}

		//–∑–∞–ø–æ–º–∏–Ω–∞–µ–º update_id  –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
		lastMessage = responseObj.Result[number-1].UpdateID + 1

	}
}

func sendPost(requestBody string, url string) {
	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π POST-–∑–∞–ø—Ä–æ—Å
	req, err := http.NewRequest("POST", url, bytes.NewBufferString(requestBody))
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Content-Type –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
	req.Header.Set("Content-Type", "application/json")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ HTTP
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		return
	}
	defer resp.Body.Close()
}

func sendMessage(chatId int, id int, mesIdInline int, mesIdRepl int, messageTime int, text string, button string, phone string, firstName string, lastName string, username string, latitude float64, longitude float64) {

	fmt.Println(text)

	switch {
	case text == "/start":

		step = 1
		FirstName = firstName
		LastName = lastName

		buttons := [][]map[string]interface{}{
			{{"text": "–†—É—Å—Å–∫–∏–π üá∑üá∫", "callback_data": "russian"}},
			{{"text": "O'zbekcha üá∫üáø", "callback_data": "uzbekistan"}},
			{{"text": "–é–∑–±–µ–∫—á–∞ üá∫üáø", "callback_data": "usbecha"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		// http.Get(host + token + "/deleteMessage?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesId))
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°—Ç—Ä–æ–π–±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫&reply_markup=" + string(inlineKeyboardJSON))

		step += 1
		break

	case step == 2:

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard := map[string]interface{}{
			"keyboard": [][]map[string]interface{}{
				{
					{
						"text":            "–î–∞",
						"request_contact": true,
					},
				},
				{
					{
						"text": "–ù–µ—Ç",
					},
				},
			},
			"resize_keyboard":   true,
			"one_time_keyboard": true,
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
		keyboardJSON, _ := json.Marshal(keyboard)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ü–æ–¥–µ–ª–∏—Ç—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞&reply_markup=" + string(keyboardJSON))

		step += 1
		break

	case step == 3 && text == "–ù–µ—Ç":

		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "backToPhone"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥–∞–ª—å—à–µ, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞&reply_markup=" + string(inlineKeyboardJSON))

		step -= 1
		break

	case step == 3:

		fmt.Println(step)

		tel = phone
		buttons := [][]map[string]interface{}{}
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/cities.php")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var cities []Cities
		err = json.NewDecoder(resp.Body).Decode(&cities)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, category := range cities {
			button := []map[string]interface{}{
				{
					"text":          category.Name,
					"callback_data": category.ID,
				},
			}
			buttons = append(buttons, button)
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, err := json.Marshal(inlineKeyboard)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç JSON:", err)
		}

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥&reply_markup=" + string(inlineKeyboardJSON))
		step += 1
		break

	case step == 4:

		fmt.Println(FirstName)
		fmt.Println(LastName)

		//—Å–æ–∑–¥–∞–ª–∏ "–±–¥ —é–∑–µ—Ä–æ–≤"
		usersDB := make(map[int]UserT)

		//—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑ –±–¥ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
		dataFile, _ := ioutil.ReadFile("db.json")
		json.Unmarshal(dataFile, &usersDB)

		//–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
		_, exist := usersDB[id]
		if !exist {
			user := UserT{}
			user.ID = id
			user.FirstName = FirstName
			user.LastName = LastName
			user.Username = username
			user.tg_id = id
			user.PhoneNumber = tel
			user.City = button
			// –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
			requestBody := `{"first_name":` + FirstName + `, "last_name":` + LastName + `, "phone":` + tel + `, "city_id": ` + button + `, "tg_username": ` + username + `}`

			sendPost(requestBody, "http://nginx:80/api/customers.php")

			usersDB[id] = user

		} else {
			// –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
			requestBody := `{"tg_id":` + strconv.Itoa(id) + `, "city_id": ` + button + `}`

			sendPost(requestBody, "http://nginx:80/api/customers.php")
		}

		file, _ := os.Create("db.json")
		jsonString, _ := json.Marshal(usersDB)
		file.Write(jsonString)

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard := map[string]interface{}{
			"keyboard": [][]map[string]interface{}{
				{{"text": "–ó–∞–∫–∞–∑–∞—Ç—å üõç"}},

				{{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å üíπ"},
					{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"},
				},
				{{"text": "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìï"},
					{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ üìà"},
				},
				{{"text": "–°–≤—è–∑–∞—Ç—å—Å—è üìû"},
					{"text": "–ö–æ—Ä–∑–∏–Ω–∞ üóë"},
				},
			},
			"resize_keyboard":   true,
			"one_time_keyboard": true,
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
		keyboardJSON, _ := json.Marshal(keyboard)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é&reply_markup=" + string(keyboardJSON))

		step += 1
		break

	case button == "backToMenu":
		step = 4
		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard := map[string]interface{}{
			"keyboard": [][]map[string]interface{}{
				{{"text": "–ó–∞–∫–∞–∑–∞—Ç—å üõç"}},

				{{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å üíπ"},
					{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"},
				},
				{{"text": "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìï"},
					{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ üìà"},
				},
				{{"text": "–°–≤—è–∑–∞—Ç—å—Å—è üìû"},
					{"text": "–ö–æ—Ä–∑–∏–Ω–∞ üóë"},
				},
			},
			"resize_keyboard":   true,
			"one_time_keyboard": true,
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
		keyboardJSON, _ := json.Marshal(keyboard)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é&reply_markup=" + string(keyboardJSON))
		step += 1
		break

	case step == 5 && text == "–ó–∞–∫–∞–∑–∞—Ç—å üõç":
		step = 5
		buttons := [][]map[string]interface{}{}
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/categories.php")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var categories []Categories
		err = json.NewDecoder(resp.Body).Decode(&categories)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, category := range categories {
			button := []map[string]interface{}{
				{
					"text":          category.CategoryName,
					"callback_data": category.CategoryName,
				},
			}
			buttons = append(buttons, button)
		}
		buttons = append(buttons, []map[string]interface{}{
			{
				"text":          "–ù–∞–∑–∞–¥",
				"callback_data": "backToMenu",
			},
		})

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, err := json.Marshal(inlineKeyboard)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç JSON:", err)
		}

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª&reply_markup=" + string(inlineKeyboardJSON))

		step += 1
		break

	case button == "backToGoods":
		buttons := [][]map[string]interface{}{}
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/categories.php")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var categories []Categories
		err = json.NewDecoder(resp.Body).Decode(&categories)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, category := range categories {
			button := []map[string]interface{}{
				{
					"text":          category.CategoryName,
					"callback_data": category.CategoryName,
				},
			}
			buttons = append(buttons, button)
		}
		buttons = append(buttons, []map[string]interface{}{
			{
				"text":          "–ù–∞–∑–∞–¥",
				"callback_data": "backToMenu",
			},
		})

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, err := json.Marshal(inlineKeyboard)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç JSON:", err)
		}

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª&reply_markup=" + string(inlineKeyboardJSON))

		step = 6
		break

	case step == 6:

		step = 6
		buttons := [][]map[string]interface{}{}
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/brands.php")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var brands []Brands
		err = json.NewDecoder(resp.Body).Decode(&brands)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, brand := range brands {
			button := []map[string]interface{}{
				{
					"text":          brand.BrandName,
					"callback_data": brand.ID,
				},
			}
			buttons = append(buttons, button)
		}
		buttons = append(buttons, []map[string]interface{}{
			{
				"text":          "–ù–∞–∑–∞–¥",
				"callback_data": "backToGoods",
			},
		})

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ë—Ä–µ–Ω–¥&reply_markup=" + string(inlineKeyboardJSON))
		step += 1
		break

	case step == 7:
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/products.php?brand_id=" + button)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var product []Product
		err = json.NewDecoder(resp.Body).Decode(&product)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, product := range product {
			// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
			buttons := [][]map[string]interface{}{
				{
					{"text": "‚ûñ", "callback_data": "minus:" + strconv.Itoa(product.ID)},
					{"text": "0", "callback_data": "quantity"},
					{"text": "‚ûï", "callback_data": "add:" + strconv.Itoa(product.ID)},
				},
				{{"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", "callback_data": "add:" + strconv.Itoa(product.ID)}},
				{{"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üóë", "callback_data": "goToCart"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

			fmt.Println(product.Photo)

			// –°–æ–∑–¥–∞–Ω–∏–µ URL –∑–∞–ø—Ä–æ—Å–∞
			apiURL := fmt.Sprintf("https://api.telegram.org/bot%s/sendPhoto?chat_id=%s&caption="+product.Name+" –∫–Ω–∞—É—Ñ "+product.Description+" –°—Ä–µ–¥–Ω–µ—Ä—ã–Ω–æ—á–Ω–∞—è —Ü–µ–Ω–∞ –≤ –≥–æ—Ä–æ–¥–µ –¢–∞—à–∫–µ–Ω—Ç "+strconv.Itoa(product.MaxPrice)+" —Å—É–º –¶–µ–Ω–∞ –°—Ç—Ä–æ–π–±–æ—Ç–∞ "+strconv.Itoa(product.Price)+" —Å—É–º &photo="+product.Photo+"&reply_markup="+string(inlineKeyboardJSON), token, strconv.Itoa(id))
			requestURL, err := url.Parse(apiURL)
			if err != nil {
				log.Fatal(err)
			}

			// –°–æ–∑–¥–∞–Ω–∏–µ HTTP GET-–∑–∞–ø—Ä–æ—Å–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
			request, err := http.NewRequest("GET", requestURL.String(), nil)
			if err != nil {
				log.Fatal(err)
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
			client := &http.Client{}
			response, err := client.Do(request)
			if err != nil {
				log.Fatal(err)
			}
			defer response.Body.Close()

			// –ß—Ç–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
			responseData, err := ioutil.ReadAll(response.Body)
			if err != nil {
				log.Fatal(err)
			}

			// –í—ã–≤–æ–¥ –∫–æ–Ω–µ—á–Ω–æ–π —Å—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
			finalURL := request.URL.String()
			fmt.Println("Final URL:", finalURL)

			// –í—ã–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
			fmt.Println("Response:", string(responseData))
		}

		step += 1
		break

	case step == 8 && button == "goToCart":
		finalPrice := 0
		cartText := ""
		for ID := range products {

			fmt.Println(ID)
			// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
			resp, err := http.Get("http://nginx:80/api/products.php?id=" + strconv.Itoa(ID))
			if err != nil {
				log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
			}
			defer resp.Body.Close()

			var product Product
			err = json.NewDecoder(resp.Body).Decode(&product)
			if err != nil {
				fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
				return
			}

			cartText += product.Name + " " + strconv.Itoa(products[ID]) + " ‚úñÔ∏è " + strconv.Itoa(product.Price)
			finalPrice += product.Price * products[ID]

		}
		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		buttons := [][]map[string]interface{}{
			{{"text": "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "callback_data": "buy"}},
			{{"text": "–ù–∞–∑–∞–¥", "callback_data": "backToGoods"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=" + cartText + " –ò—Ç–æ–≥–æ: " + strconv.Itoa(finalPrice) + "&reply_markup=" + string(inlineKeyboardJSON))

		step += 1
		break

	case step == 9 && button == "buy":

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard := map[string]interface{}{
			"keyboard": [][]map[string]interface{}{
				{
					{
						"text":             "–î–∞",
						"request_location": true,
					},
				},
				{
					{
						"text": "–ù–µ—Ç",
					},
				},
			},
			"resize_keyboard":   true,
			"one_time_keyboard": true,
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
		keyboardJSON, _ := json.Marshal(keyboard)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–ü–æ–¥–µ–ª–∏—Ç—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º?&reply_markup=" + string(keyboardJSON))
		step += 1
		break

	case step == 10:

		time := time.Now().Unix()
		coordinates := Coordinates{
			Latitude:  latitude,
			Longitude: longitude,
		}
		jsonProducts, _ := json.Marshal(products)
		jsonCoordinates, _ := json.Marshal(coordinates)

		// –°–æ–∑–¥–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ JSON
		requestBody := `{"customer_id":` + strconv.Itoa(chatId) + `, "order_date":` + strconv.Itoa(int(time)) + `, "products":` + string(jsonProducts) + `, "location": ` + string(jsonCoordinates) + `}`

		sendPost(requestBody, "http://nginx:80/api/orders/create-with-vendor-calc.php")

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
		keyboard := map[string]interface{}{
			"keyboard": [][]map[string]interface{}{
				{{"text": "–ó–∞–∫–∞–∑–∞—Ç—å üõç"}},

				{{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å üíπ"},
					{"text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è"},
				},
				{{"text": "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìï"},
					{"text": "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ üìà"},
				},
				{{"text": "–°–≤—è–∑–∞—Ç—å—Å—è üìû"},
					{"text": "–ö–æ—Ä–∑–∏–Ω–∞ üóë"},
				},
			},
			"resize_keyboard":   true,
			"one_time_keyboard": true,
		}

		// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ JSON
		keyboardJSON, _ := json.Marshal(keyboard)
		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –°—Ç—Ä–æ–π–±–æ—Ç, —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞&reply_markup=" + string(keyboardJSON))

		products = make(map[int]int)
		step = 5
		break
	}

	if strings.SplitN(button, ":", 2)[0] == "add" {
		productStr := strings.Split(button, ":")[1]
		productID, _ := strconv.Atoi(productStr)
		// products = append(products, productID)
		// fmt.Println(products)
		// –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å id=3 –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2
		quantity := 1

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º id –≤ –º–∞—Å—Å–∏–≤–µ
		found := false
		for ID := range products {
			if ID == productID {
				// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
				products[ID] += quantity
				found = true
				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
				buttons := [][]map[string]interface{}{
					{
						{"text": "‚ûñ", "callback_data": "minus:" + strconv.Itoa(ID)},
						{"text": strconv.Itoa(products[ID]), "callback_data": "quantity"},
						{"text": "‚ûï", "callback_data": "add:" + strconv.Itoa(ID)},
					},
					{{"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", "callback_data": "add:" + strconv.Itoa(ID)}},
					{{"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üóë", "callback_data": "goToCart"}},
				}

				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

				http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
				break
			}
		}

		// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		if !found {
			products[productID] = quantity
			// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
			buttons := [][]map[string]interface{}{
				{
					{"text": "‚ûñ", "callback_data": "minus:" + productStr},
					{"text": "1", "callback_data": "quantity"},
					{"text": "‚ûï", "callback_data": "add:" + productStr},
				},
				{{"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", "callback_data": "add:" + productStr}},
				{{"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üóë", "callback_data": "goToCart"}},
			}

			inlineKeyboard := map[string]interface{}{
				"inline_keyboard": buttons,
			}

			inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

			http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
		}
		fmt.Println(products)
	}

	if strings.SplitN(button, ":", 2)[0] == "minus" {
		productStr := strings.Split(button, ":")[1]
		productID, _ := strconv.Atoi(productStr)
		// products = append(products, productID)
		// fmt.Println(products)
		// –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ —Å id=3 –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 2
		quantity := 1

		for ID := range products {
			if ID == productID {
				// –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
				products[ID] -= quantity
				// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º
				buttons := [][]map[string]interface{}{
					{
						{"text": "‚ûñ", "callback_data": "minus:" + productStr},
						{"text": strconv.Itoa(products[ID]), "callback_data": quantity},
						{"text": "‚ûï", "callback_data": "add:" + productStr},
					},
					{{"text": "–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É üõí", "callback_data": "add:" + productStr}},
					{{"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É üóë", "callback_data": "goToCart"}},
				}

				inlineKeyboard := map[string]interface{}{
					"inline_keyboard": buttons,
				}

				inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

				http.Get(host + token + "/editMessageReplyMarkup?chat_id=" + strconv.Itoa(id) + "&message_id=" + strconv.Itoa(mesIdInline) + "&reply_markup=" + string(inlineKeyboardJSON))
				if products[productID] == 0 {
					delete(products, productID)
				}
				break
			}
		}

		// // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä–∞ —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç –≤ –º–∞—Å—Å–∏–≤–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		// if !found {
		// 	products = append(products, Product{ID: productID, Quantity: quantity})
		// }
		fmt.Println(products)
	}

	if text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ üìà" {

		channelURL := "https://t.me/stroyb0t"

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
		currentTime := time.Now()

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã GMT+5
		location := time.FixedZone("GMT+5", 5*60*60)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		currentTime = currentTime.In(location)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		formattedTime := currentTime.Format("01-02-2006 15:04:05")

		buttons := [][]map[string]interface{}{
			{{"text": "–ü–µ—Ä–µ–π—Ç–∏", "url": channelURL}},
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "backToMenu"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–¶–µ–Ω–∞ –Ω–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã  " + formattedTime + "&reply_markup=" + string(inlineKeyboardJSON))

	}

	if text == "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å üíπ" {

		channelURL := "https://t.me/stroyb0t2"

		// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
		currentTime := time.Now()

		// –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω—ã GMT+5
		location := time.FixedZone("GMT+5", 5*60*60)

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
		currentTime = currentTime.In(location)

		// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
		formattedTime := currentTime.Format("01-02-2006 15:04:05")

		buttons := [][]map[string]interface{}{
			{{"text": "–ü–µ—Ä–µ–π—Ç–∏", "url": channelURL}},
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "backToMenu"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç " + formattedTime + "&reply_markup=" + string(inlineKeyboardJSON))

	}

	if text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öôÔ∏è" {
		buttons := [][]map[string]interface{}{
			{{"text": "–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä", "callback_data": "number"},
				{"text": "–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥", "callback_data": "city"}},

			{{"text": "–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "callback_data": "backToMenu"},
				{"text": "–ü—É–±–ª–∏—á–Ω–∞—è –æ—Ñ–µ—Ä—Ç–∞", "callback_data": "oferta"}},

			{{"text": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "callback_data": "info"},
				{"text": "–°—Ç–∞—Ç—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–º", "callback_data": "partnership"}},

			{{"text": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", "callback_data": "book"}},
		}

		buttons = append(buttons, []map[string]interface{}{
			{
				"text":          "–ù–∞–∑–∞–¥",
				"callback_data": "backToMenu",
			},
		})

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ù–∞—Å—Ç—Ä–æ–π–∫–∏&reply_markup=" + string(inlineKeyboardJSON))

	}

	if button == "info" {

		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": ""}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ&reply_markup=" + string(inlineKeyboardJSON))

	}

	if button == "city" {
		buttons := [][]map[string]interface{}{}
		// –°–æ–∑–¥–∞–µ–º GET-–∑–∞–ø—Ä–æ—Å
		resp, err := http.Get("http://nginx:80/api/cities.php")
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:", err)
		}
		defer resp.Body.Close()

		var cities []Cities
		err = json.NewDecoder(resp.Body).Decode(&cities)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON:", err)
		}

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
		for _, category := range cities {
			button := []map[string]interface{}{
				{
					"text":          category.Name,
					"callback_data": category.ID,
				},
			}
			buttons = append(buttons, button)
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, err := json.Marshal(inlineKeyboard)
		if err != nil {
			log.Fatal("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç JSON:", err)
		}

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(id) + "&text=–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥&reply_markup=" + string(inlineKeyboardJSON))

		step = 4
	}

	if text == "–ú–æ–∏ –∑–∞–∫–∞–∑—ã üìï" {

		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "backToMenu"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–ú–æ–∏ –∑–∞–∫–∞–∑—ã &reply_markup=" + string(inlineKeyboardJSON))
	}

	if text == "–°–≤—è–∑–∞—Ç—å—Å—è üìû" {

		buttons := [][]map[string]interface{}{
			{{"text": "–ù–∞–∑–∞–¥ üîô", "callback_data": "backToMenu"}},
		}

		inlineKeyboard := map[string]interface{}{
			"inline_keyboard": buttons,
		}

		inlineKeyboardJSON, _ := json.Marshal(inlineKeyboard)

		http.Get(host + token + "/sendMessage?chat_id=" + strconv.Itoa(chatId) + "&text=–°–≤—è–∑–∞—Ç—å—Å—è &reply_markup=" + string(inlineKeyboardJSON))

	}
}
